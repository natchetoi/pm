<?php

/**
 * @file
 */


class RoomsBookingTestMain extends DrupalWebTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Rooms Booking Test Main',
      'description' => t('Rooms Booking Test Main'),
      'group' => 'Rooms',
    );
  }

  public function setUp() {
    // Enable module Rooms Unit
    parent::setUp(array('rooms_booking', 'rooms_booking_manager'));

    // Create a new user with permissions of Configure rooms settings
    $admin = $this->drupalCreateUser(array('access administration pages', 'administer bookable unit types', 'manage booking unit availability', 'view availability information', 'administer bookable units', 'manage booking unit pricing', 'administer booking types', 'administer bookings'));
    $this->drupalLogin($admin);
  }

  public function testRoomsBooking() {
    $this->drupalPost('admin/rooms/units/unit-types/add',
        array(
          'label' => 'Single Rooms',
          'type' => 'single_rooms',
          'data[base_price]' => '100',
          'data[sleeps]' => '2',
          'data[singlediscount]' => '10',
        ),
      t('Save unit type'));

    $this->drupalPost('admin/rooms/units/add/single_rooms',
        array(
          'name' => 'Room 100',
          'sleeps' => '2',
          'base_price' => '100',
          'bookable' => 1,
          'default_state' => 1,
          'data[singlediscount]' => '10',
        ),
      t('Save Unit'));

    $this->drupalGet('admin/rooms/bookings');

    $this->assertText('No bookings have been created yet.');

    $this->drupalPostAJAX('admin/rooms/bookings/add/standard_booking',
      array(
        'client' => 'user1',
        'rooms_start_date[date]' => '05/06/2012',
        'rooms_end_date[date]' => '06/06/2012',
        'data[group_size]' => 2,
      ),
      array('op' => 'Assign Room'));

    $this->drupalPostAJAX(NULL,
      array(
        'client' => 'user1',
        'rooms_start_date[date]' => '05/06/2012',
        'rooms_end_date[date]' => '06/06/2012',
        'data[group_size]' => 2,
        'unit_type' => 'single_rooms',
      ),
      'unit_type');

    $this->assertText('Room 100 - Cost: 100 $');

    $this->drupalPost(NULL,
        array(
          'client' => 'user1',
          'rooms_start_date[date]' => '05/06/2012',
          'rooms_end_date[date]' => '06/06/2012',
          'data[group_size]' => 2,
          'unit_type' => 'single_rooms',
          'unit_id' => 1,
        ),
      t('Save Booking'));

    $this->assertText('Bookings List');
    $this->assertText('user1');
    $this->assertText('05-06-2012');
    $this->assertText('06-06-2012');
    $this->assertText('Room 100');
    $this->assertText('Standard Booking');
    $this->assertText('Delete');
  }
}


class RoomsBookingTestSingleOccupancy extends DrupalWebTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Rooms Booking Test Single Occupancy',
      'description' => t('Rooms Booking Test Single Occupancy'),
      'group' => 'Rooms',
    );
  }

  public function setUp() {
    // Enable module Rooms Unit
    parent::setUp(array('rooms_booking', 'rooms_booking_manager'));

    // Create a new user with permissions of Configure rooms settings
    $admin = $this->drupalCreateUser(array('access administration pages', 'administer bookable unit types', 'manage booking unit availability', 'view availability information', 'administer bookable units', 'manage booking unit pricing', 'administer booking types', 'administer bookings'));
    $this->drupalLogin($admin);
  }

  public function testRoomsBookingSingleOccupancy() {
    $this->drupalPost('admin/rooms/units/unit-types/add',
        array(
          'label' => 'Single Rooms',
          'type' => 'single_rooms',
          'data[base_price]' => '100',
          'data[sleeps]' => '2',
          'data[singlediscount]' => '10',
        ),
      t('Save unit type'));

    $this->drupalPost('admin/rooms/units/add/single_rooms',
        array(
          'name' => 'Room 100',
          'sleeps' => '2',
          'base_price' => '100',
          'bookable' => 1,
          'default_state' => 1,
          'data[singlediscount]' => '10',
        ),
      t('Save Unit'));

    $this->drupalGet('admin/rooms/bookings');

    $this->assertText('No bookings have been created yet.');

    $this->drupalPostAJAX('admin/rooms/bookings/add/standard_booking',
      array(
        'client' => 'user1',
        'rooms_start_date[date]' => '01/08/2012',
        'rooms_end_date[date]' => '08/08/2012',
        'data[group_size]' => 1,
      ),
      array('op' => 'Assign Room'));

    $this->drupalPostAJAX(NULL,
      array(
        'client' => 'user1',
        'rooms_start_date[date]' => '01/08/2012',
        'rooms_end_date[date]' => '08/08/2012',
        'data[group_size]' => 1,
        'unit_type' => 'single_rooms',
      ),
      'unit_type');

    $this->assertText('Room 100 - Cost: 630 $');

    $this->drupalPost(NULL,
        array(
          'client' => 'user1',
          'rooms_start_date[date]' => '01/08/2012',
          'rooms_end_date[date]' => '08/08/2012',
          'data[group_size]' => 1,
          'unit_type' => 'single_rooms',
          'unit_id' => 1,
        ),
      t('Save Booking'));

    $this->assertText('Bookings List');
    $this->assertText('user1');
    $this->assertText('01-08-2012');
    $this->assertText('08-08-2012');
    $this->assertText('Room 100');
    $this->assertText('Standard Booking');
    $this->assertText('Delete');
  }
}


class RoomsBookingFilterTestCase extends DrupalWebTestCase {

  public function setUp() {
    // Enable module Rooms Unit
    parent::setUp(array('rooms_booking', 'rooms_booking_manager', 'rooms_test', 'entity'));

    // Create a new user with permissions of Configure rooms settings
    $admin = $this->drupalCreateUser(array('access administration pages', 'administer bookable unit types', 'manage booking unit availability', 'view availability information', 'administer bookable units', 'manage booking unit pricing', 'administer booking types', 'administer bookings', 'book units'));
    $this->drupalLogin($admin);
  }

  public static function getInfo() {
    return array(
      'name' => 'RoomsBookingFilter Test',
      'description' => t('RoomsBookingFilter Test.'),
      'group' => 'Rooms',
    );
  }

  public function testRoomsBookingFilterTestCase() {

    // Create bookable unit type "Deluxe Room"
    entity_save('rooms_unit_type', entity_import('rooms_unit_type', '{
      "type" : "deluxe_unit",
      "label" : "Deluxe Room",
      "weight" : "0",
      "data" : {
        "base_price" : 200,
        "sleeps" : 2
      },
      "rdf_mapping" : []
    }'));
    // Create bookable unit type "Standard Room"
    entity_save('rooms_unit_type', entity_import('rooms_unit_type', '{
      "type" : "standard_unit",
      "label" : "Standard Room",
      "weight" : "0",
      "data" : {
        "base_price" : 100,
        "sleeps" : 2
      },
      "rdf_mapping" : []
    }'));
    // Create bookable unit type "Single Room"
    entity_save('rooms_unit_type', entity_import('rooms_unit_type', '{
      "type" : "single_unit",
      "label" : "Single Room",
      "weight" : "0",
      "data" : {
        "base_price" : 150,
        "sleeps" : 1
      },
      "rdf_mapping" : []
    }'));


    // Create a Bookable Unit (Standard Unit)
    $std_unit = rooms_unit_create(array('type' => 'standard_unit'));
    $std_unit->name = 'Standard';
    $std_unit->default_state = ROOMS_AVAILABLE;
    $std_unit->save();

    // Create a Bookable Unit (Deluxe Unit)
    $del_unit = rooms_unit_create(array('type' => 'deluxe_unit'));
    $del_unit->name = 'Deluxe';
    $del_unit->default_state = ROOMS_AVAILABLE;
    $del_unit->save();


    // Test AvailabilityAgentSizeFilter
    $this->drupalGet('admin/rooms/test/availabilitysizefilter');

    $this->assertText('All size: a:1:{s:10:"rooms_unit";a:2:{i:1;O:8:"stdClass":2:{s:7:"unit_id";s:1:"1";s:4:"type";s:13:"standard_unit";}i:2;O:8:"stdClass":2:{s:7:"unit_id";s:1:"2";s:4:"type";s:11:"deluxe_unit";}}}');


    // Make Deluxe Unit not available from 21-02-2013 to 25-02-2013
    $be = new BookingEvent($del_unit->unit_id, ROOMS_NOT_AVAILABLE, new DateTime('21-02-2013'), new DateTime('25-02-2013'));
    $events = array($be);
    $rc = new UnitCalendar($del_unit->unit_id);
    $response = $rc->updateCalendar($events);

    // Test AvailabilityAgentDateFilter
    $this->drupalGet('admin/rooms/test/availabilitydatefilter');

    $this->assertText('a:1:{s:10:"rooms_unit";a:1:{i:1;O:8:"stdClass":2:{s:7:"unit_id";s:1:"1";s:4:"type";s:13:"standard_unit";}}}');


    // Make Standard Unit not available from 10-02-2013 to 23-02-2013
    $be = new BookingEvent($std_unit->unit_id, ROOMS_NOT_AVAILABLE, new DateTime('10-02-2013'), new DateTime('23-02-2013'));
    $events = array($be);
    $rc = new UnitCalendar($std_unit->unit_id);
    $response = $rc->updateCalendar($events);

    // Make Deluxe Unit available from 21-02-2013 to 25-02-2013
    $be = new BookingEvent($del_unit->unit_id, ROOMS_AVAILABLE, new DateTime('21-02-2013'), new DateTime('25-02-2013'));
    $events = array($be);
    $rc = new UnitCalendar($del_unit->unit_id);
    $response = $rc->updateCalendar($events);

    // Test AvailabilityAgentDateFilter
    $this->drupalGet('admin/rooms/test/availabilitydatefilter');

    $this->assertText('a:1:{s:10:"rooms_unit";a:1:{i:2;O:8:"stdClass":2:{s:7:"unit_id";s:1:"2";s:4:"type";s:11:"deluxe_unit";}}}');


    // Create a Bookable Unit (Single Unit)
    $single_unit = rooms_unit_create(array('type' => 'single_unit'));
    $single_unit->name = 'Single';
    $single_unit->default_state = ROOMS_AVAILABLE;
    $single_unit->save();

    // Test AvailabilityAgentSizeFilter
    $this->drupalGet('admin/rooms/test/availabilitysizefilter');

    $this->assertText('Group size 2: a:1:{s:10:"rooms_unit";a:2:{i:1;O:8:"stdClass":2:{s:7:"unit_id";s:1:"1";s:4:"type";s:13:"standard_unit";}i:2;O:8:"stdClass":2:{s:7:"unit_id";s:1:"2";s:4:"type";s:11:"deluxe_unit";}}}');

    $this->assertText('All size: a:1:{s:10:"rooms_unit";a:3:{i:3;O:8:"stdClass":2:{s:7:"unit_id";s:1:"3";s:4:"type";s:11:"single_unit";}i:1;O:8:"stdClass":2:{s:7:"unit_id";s:1:"1";s:4:"type";s:13:"standard_unit";}i:2;O:8:"stdClass":2:{s:7:"unit_id";s:1:"2";s:4:"type";s:11:"deluxe_unit";}}}');

    $this->assertText('Deluxe unit: a:1:{s:10:"rooms_unit";a:1:{i:0;O:8:"stdClass":2:{s:7:"unit_id";i:2;s:4:"type";s:11:"deluxe_unit";}}}');


    // Test AvailabilityAgentCommerceFilter
    $this->drupalGet('admin/rooms/test/availabilitycommercefilter');

    $this->assertText('a:1:{s:10:"rooms_unit";a:3:{i:3;O:8:"stdClass":2:{s:7:"unit_id";s:1:"3";s:4:"type";s:11:"single_unit";}i:1;O:8:"stdClass":2:{s:7:"unit_id";s:1:"1";s:4:"type";s:13:"standard_unit";}i:2;O:8:"stdClass":2:{s:7:"unit_id";s:1:"2";s:4:"type";s:11:"deluxe_unit";}}}');

    $this->drupalPost('booking/2015-02-24/2015-02-28/1',
        array(
          'standard_unit:400:quantity' => 1,
        ),
      t('Place Booking'),
      array('query' => array('rooms_group_size1' => 2, 'rooms_children1' => 0)));

    // Test AvailabilityAgentCommerceFilter
    $this->drupalGet('admin/rooms/test/availabilitycommercefilter');

    $this->assertText('a:1:{s:10:"rooms_unit";a:2:{i:3;O:8:"stdClass":2:{s:7:"unit_id";s:1:"3";s:4:"type";s:11:"single_unit";}i:2;O:8:"stdClass":2:{s:7:"unit_id";s:1:"2";s:4:"type";s:11:"deluxe_unit";}}}');

  }

}
