<?php
/**
 * @file
 * An example field using the Field Types API.
 */

/**
 * @defgroup slickgrid_field Example: Field Types API
 * @ingroup examples
 * @{
 * Examples using Field Types API.
 *
 * This is updated from Barry Jaspan's presentation at Drupalcon Paris,
 * @link http://acquia.com/community/resources/acquia-tv/intro-field-api-module-developers Video Presentation @endlink
 *
 * Providing a field requires:
 * - Defining a field:
 *   - hook_field_info()
 *   - hook_field_schema()
 *   - hook_field_validate()
 *   - hook_field_is_empty()
 *
 * - Defining a formatter for the field (the portion that outputs the field for
 *   display):
 *   - hook_field_formatter_info()
 *   - hook_field_formatter_view()
 *
 * - Defining a widget for the edit form:
 *   - hook_field_widget_info()
 *   - hook_field_widget_form()
 *
 * Our module defines the field in slickgrid_field_field_info(),
 * slickgrid_field_field_validate() and slickgrid_field_field_is_empty().
 * slickgrid_field_field_schema() is implemented in slickgrid_field.install.
 *
 * Our module sets up a formatter in slickgrid_field_field_formatter_info() and
 * slickgrid_field_field_formatter_view(). These are the API hooks that present
 * formatted and themed output to the user.

 * And finally, our module defines the widet in
 * slickgrid_field_field_widget_info() and slickgrid_field_field_widget_form().
 * The widget is the form element used to receive input from the user
 * when the field is being populated.
 *
 * @see field_types
 * @see field
 */

/***************************************************************
 * Field Type API hooks
 ***************************************************************/
/*
iplements hook_init().
*/
function slickgrid_field_init(){
drupal_add_css(drupal_get_path('module', 'slickgrid_field') . '/css/slickgrid_field.css');
}
/**
 * Implements hook_field_info().
 *
 * Provides the description of the field.
 */
function slickgrid_field_field_info() {
  return array(
    // We name our field as the associative name of the array.
    'slickgrid_field_slickgrid' => array(
      'label' => t('Slickgrid table'),
      'description' => t('Demonstrates a field composed of an RGB color.'),
      'default_widget' => 'slickgrid_default_widget',
      'default_formatter' => 'slickgrid_default_formatter',
    ),
  );
}

/**
 * Implements hook_field_validate().
 *
 * This hook gives us a chance to validate content that's in our
 * field. We're really only interested in the $items parameter, since
 * it holds arrays representing content in the field we've defined.
 * We want to verify that the items only contain RGB hex values like
 * this: #RRGGBB. If the item validates, we do nothing. If it doesn't
 * validate, we add our own error notification to the $errors parameter.
 *
 * @see slickgrid_field_field_widget_error()
 */
function slickgrid_field_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
/*
  foreach ($items as $delta => $item) {
    if (!empty($item['slickgrid'])) {
      if (! preg_match('@^#[0-9a-f]{6}$@', $item['slickgrid'])) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'slickgrid_field_invalid',
          'message' => t('Color must be in the HTML format #abcdef.'),
        );
      }
    }
  }
  */
}


/**
 * Implements hook_field_is_empty().
 *
 * hook_field_is_emtpy() is where Drupal asks us if this field is empty.
 * Return TRUE if it does not contain data, FALSE if it does. This lets
 * the form API flag an error when required fields are empty.
 */
function slickgrid_field_field_is_empty($item, $field) {
  return empty($item['slickgrid']);
}

/**
 * Implements hook_field_formatter_info().
 *
 * We need to tell Drupal that we have two different types of formatters
 * for this field. One will change the text color, and the other will
 * change the background color.
 *
 * @see slickgrid_field_field_formatter_view()
 */
function slickgrid_field_field_formatter_info() {
  return array(
    // This formatter just displays the hex value in the color indicated.
    'slickgrid_default_formatter' => array(
      'label' => t('Simple text-based formatter'),
      'field types' => array('slickgrid_field_slickgrid'),
    ),
    // This formatter changes the background color of the content region.
    'slickgrid_field_color_background' => array(
      'label' => t('Change the background of the output text'),
      'field types' => array('slickgrid_field_slickgrid'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 *
 * Two formatters are implemented.
 * - slickgrid_default_formatter just outputs markup indicating the color that
 *   was entered and uses an inline style to set the text color to that value.
 * - slickgrid_field_color_background does the same but also changes the
 *   background color of div.region-content.
 *
 * @see slickgrid_field_field_formatter_info()
 */
function slickgrid_field_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    // This formatter simply outputs the field as text and with a color.
    case 'slickgrid_default_formatter':
      foreach ($items as $delta => $item) {
	  
	  /*
        $element[$delta] = array(
          // We create a render array to produce the desired markup,
          // "<p style="color: #hexcolor">The color code ... #hexcolor</p>".
          // See theme_html_tag().
          '#type' => 'html_tag',
          '#tag' => 'p',
          '#attributes' => array(
            'style' => 'color: ' . $item['slickgrid'],
          ),
          '#value' => t('The color code in this field is @code', array('@code' => $item['slickgrid'])),
        );
*/
drupal_set_message($item['slickgrid']);
$element[$delta] = array(
            '#type' => 'markup',

			'#markup' => "
			<div class='myGrid_default_formatter_wrapper' style='width:600px;'>
					<div id='myGrid_default_formatter' style='width:100%;height:200px;'></div>

			<div id='slickgrid-value' class='slickgrid-value' value='".$item['slickgrid']."'></div>
			</div>
			",
			
				
			'#attached' => array(
				
				// Add javascript to trigger the colorpicker.
				'js' => array(
					drupal_get_path('module', 'slickgrid_field') . '/js/lib/firebugx.js',
					drupal_get_path('module', 'slickgrid_field') . '/js/lib/jquery-1.7.min.js',
					drupal_get_path('module', 'slickgrid_field') . '/js/lib/jquery-ui-1.8.16.custom.min.js',
					drupal_get_path('module', 'slickgrid_field') . '/js/lib/jquery.event.drag-2.2.js',
					drupal_get_path('module', 'slickgrid_field') . '/js/slick.core.js',
					//drupal_get_path('module', 'slickgrid_field') . '/js/plugins/slick.cellrangedecorator.js',
					//drupal_get_path('module', 'slickgrid_field') . '/js/plugins/slick.cellrangeselector.js',
					//drupal_get_path('module', 'slickgrid_field') . '/js/plugins/slick.cellselectionmodel.js',
					drupal_get_path('module', 'slickgrid_field') . '/js/slick.formatters.js',
					drupal_get_path('module', 'slickgrid_field') . '/js/slick.editors.js',
					
					drupal_get_path('module', 'slickgrid_field') . '/js/plugins/slick.rowselectionmodel.js',
					drupal_get_path('module', 'slickgrid_field') . '/js/slick.grid.js',		  
					drupal_get_path('module', 'slickgrid_field') . '/js/slick.dataview.js',
					
					drupal_get_path('module', 'slickgrid_field') . '/controls/slick.pager.js',
					drupal_get_path('module', 'slickgrid_field') . '/controls/slick.columnpicker.js',
					drupal_get_path('module', 'slickgrid_field') . '/js/slickgrid_field_default_formatter.js',			
				),
				'css'=>array(
				drupal_get_path('module', 'slickgrid_field') . '/css/slick-default-theme.css',
				drupal_get_path('module', 'slickgrid_field') . '/css/slick.grid.css', 
				drupal_get_path('module', 'slickgrid_field') . '/css/jquery-ui-1.8.16.custom.css', 
				
				drupal_get_path('module', 'slickgrid_field') . '/css/slickgrid_field.css', 
				),
			),
		);



		}
      break;

    // This formatter adds css to the page changing the '.region-content' area's
    // background color. If there are many fields, the last one will win.
    case 'slickgrid_field_color_background':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#type' => 'html_tag',
          '#tag' => 'p',
          '#value' => t('The content area color has been changed to @code', array('@code' => $item['slickgrid'])),
          '#attached' => array(
            'css' => array(
              array(
                'data' => 'div.region-content { background-color:' . $item['slickgrid'] . ';}',
                'type' => 'inline',
              ),
            ),
          ),
        );
      }
      break;
  }

  return $element;
}

/**
 * Implements hook_field_widget_info().
 *
 * Three widgets are provided.
 * - A simple text-only widget where the user enters the '#ffffff'.
 * - A 3-textfield widget that gathers the red, green, and blue values
 *   separately.
 * - A farbtastic colorpicker widget that chooses the value graphically.
 *
 * These widget types will eventually show up in hook_field_widget_form,
 * where we will have to flesh them out.
 *
 * @see slickgrid_field_field_widget_form()
 */
function slickgrid_field_field_widget_info() {
  return array(
  /*
    'slickgrid_field_text' => array(
      'label' => t('Slickgrid test1'),
      'field types' => array('slickgrid_field_slickgrid'),
    ),
  
    'slickgrid_field_colorpicker' => array(
      'label' => t('Slickgrid test 3 Color Picker'),
      'field types' => array('slickgrid_field_slickgrid'),
    ),
	*/
	  'slickgrid_default_widget' => array(
       'label' => t('Slickgrid default widget'),
       'field types' => array('slickgrid_field_slickgrid'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 *
 * hook_widget_form() is where Drupal tells us to create form elements for
 * our field's widget.
 *
 * We provide one of three different forms, depending on the widget type of
 * the Form API item provided.
 *
 * The 'slickgrid_field_colorpicker' and 'slickgrid_field_text' are essentially
 * the same, but slickgrid_field_colorpicker adds a javascript colorpicker
 * helper.
 *
 * slickgrid_default_widget displays three text fields, one each for red, green,
 * and blue. However, the field type defines a single text column,
 * rgb, which needs an HTML color spec. Define an element validate
 * handler that converts our r, g, and b fields into a simulated single
 * 'slickgrid' form element.
 */
function slickgrid_field_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $value = isset($items[$delta]['slickgrid']) ? $items[$delta]['slickgrid'] : '';

  $widget = $element;
  $widget['#delta'] = $delta;

  switch ($instance['widget']['type']) {

    case 'slickgrid_default_widget':
      // Convert rgb value into r, g, and b for #default_value.
      
	  if (!empty($value)) {
        preg_match_all('@..@', substr($value, 1), $match);
      }
      else {
        $match = array(array());
      }

      // Make this a fieldset with the three text fields.
      $widget += array(
        '#type' => 'fieldset',
        '#element_validate' => array('slickgrid_default_widget_validate'),

        // #delta is set so that the validation function will be able
        // to access external value information which otherwise would be
        // unavailable.
        '#delta' => $delta,

        '#attached' => array(
          'css' => array(drupal_get_path('module', 'slickgrid_field') . '/slickgrid_field.css'),
        ),
      );
	   
		
	/*
  

      // Create a textfield for saturation values for Red, Green, and Blue.
      foreach (array('r' => t('Red'), 'g' => t('Green'), 'b' => t('Blue')) as $key => $title) {
        $widget[$key] = array(
          '#type' => 'textfield',
          '#title' => $title,
          '#size' => 2,
          '#default_value' => array_shift($match[0]),
          '#attributes' => array('class' => array('rgb-entry')),
          '#description' => t('The 2-digit hexadecimal representation of @color saturation, like "a1" or "ff"', array('@color' => $title)),
        );
        // Since Form API doesn't allow a fieldset to be required, we
        // have to require each field element individually.
        if ($instance['required'] == 1) $widget[$key]['#required'] = 1;
      }
	  */
	  /*
	$widget['information'] = array(
		'#type'=>'markup',
		'#markup' => '
		<div style="width:600px;">
		<div id="myGrid" style="width:100%;height:200px;"></div>
	</div>
		',
	);
	*/
$widget['test'] = array(
            '#type' => 'textarea',
			'#suffix' => '<div style="width:600px;">
					<div id="myGrid" style="width:100%;height:200px;"></div>
			</div>',
			'#title'=>'test',
			'#default_value' => $value,
			
				
			'#attached' => array(
				// Add Farbtastic color picker.
				'library' => array(
					array('system', 'farbtastic'),
				),
				// Add javascript to trigger the colorpicker.
				'js' => array(
					drupal_get_path('module', 'slickgrid_field') . '/js/lib/firebugx.js',
					drupal_get_path('module', 'slickgrid_field') . '/js/lib/jquery-1.7.min.js',
					drupal_get_path('module', 'slickgrid_field') . '/js/lib/jquery-ui-1.8.16.custom.min.js',
					drupal_get_path('module', 'slickgrid_field') . '/js/lib/jquery.event.drag-2.2.js',
					drupal_get_path('module', 'slickgrid_field') . '/js/slick.core.js',
					
					drupal_get_path('module', 'slickgrid_field') . '/js/slick.formatters.js',
					drupal_get_path('module', 'slickgrid_field') . '/js/slick.editors.js',
					
					drupal_get_path('module', 'slickgrid_field') . '/js/plugins/slick.rowselectionmodel.js',
					drupal_get_path('module', 'slickgrid_field') . '/js/slick.grid.js',		  
					drupal_get_path('module', 'slickgrid_field') . '/js/slick.dataview.js',
								
					drupal_get_path('module', 'slickgrid_field') . '/controls/slick.pager.js',
					drupal_get_path('module', 'slickgrid_field') . '/controls/slick.columnpicker.js',
					
				
					
					drupal_get_path('module', 'slickgrid_field') . '/js/slickgrid_field.js',
				),
				'css'=>array(
				drupal_get_path('module', 'slickgrid_field') . '/css/slick-default-theme.css',
				drupal_get_path('module', 'slickgrid_field') . '/css/slick.grid.css', 
				drupal_get_path('module', 'slickgrid_field') . '/css/jquery-ui-1.8.16.custom.css', 
				
				
				drupal_get_path('module', 'slickgrid_field') . '/css/slickgrid_field.css', 
				),
			),
		);
		
        // Since Form API doesn't allow a fieldset to be required, we
        // have to require each field element individually.
        if ($instance['required'] == 1) $widget[$key]['#required'] = 1;
//	   $widget += array(
  //      '#type' => 'textarea',
    //    '#default_value' => $value,
        // Allow a slightly larger size that the field length to allow for some
        // configurations where all characters won't fit in input field.
      //  '#size' => 7,
        //'#maxlength' => 7,
      //);
	  /*
		 $widget +=  array(
      '#type' => 'textarea',
      '#title' => t('Site additional info'),
      '#size' => 60,
      '#maxlength' => 60,
  );*/
	  
      break;

  }

  $element['slickgrid'] = $widget;
  //drupal_set_message("<pre>".print_r($widget,true)."</pre");
  return $element;
}


/**
 * Validate the individual fields and then convert them into a single HTML RGB
 * value as text.
 */
function slickgrid_default_widget_validate($element, &$form_state) {
  $delta = $element['#delta']; // TODO: Isn't there a better way to find out which element?
  $field = $form_state['field'][$element['#field_name']][$element['#language']]['field'];
  $field_name = $field['field_name'];
  drupal_set_message('validate');
  drupal_set_message('fiend_name '.$field_name);
  
  
  if (isset($form_state['values'][$field_name][$element['#language']][$delta]['slickgrid'])) {
	
    $values = $form_state['values'][$field_name][$element['#language']][$delta]['slickgrid'];
	drupal_set_message('<pre>'.print_r($values,true)."</pre>");
	/*
    foreach (array('r', 'g', 'b') as $colorfield) {
      $colorfield_value = hexdec($values[$colorfield]);
      // If they left any empty, we'll set the value empty and quit.
      if (strlen($values[$colorfield]) == 0) {
        form_set_value($element, '', $form_state);
        return;
      }
      // If they gave us anything that's not hex, reject it.
      if ( (strlen($values[$colorfield]) != 2) || $colorfield_value < 0 || $colorfield_value > 255) {
        form_error($element[$colorfield], t("Saturation value must be a 2-digit hexadecimal value between 00 and ff."));
      }
    }

    $value = sprintf('#%02s%02s%02s', $values['r'], $values['g'], $values['b']);
*/
	$value=$values['test'];
    form_set_value($element, $value, $form_state);
  }
}

/**
 * Implements hook_field_widget_error().
 *
 * hook_field_widget_error() lets us figure out what to do with errors
 * we might have generated in hook_field_validate(). Generally, we'll just
 * call form_error().
 *
 * @see slickgrid_field_field_validate()
 * @see form_error()
 */
function slickgrid_field_field_widget_error($element, $error, $form, &$form_state) {
  switch ($error['error']) {
    case 'slickgrid_field_invalid':
      form_error($element, $error['message']);
      break;
  }
}


/**
 * Implements hook_menu().
 *
 * Provides a simple user interface that tells the developer where to go.
 */
function slickgrid_field_menu() {
    $items['admin/content/slickgrid'] = array(
    'title' => 'Slickgrid',
    'page callback' => '_slickgrid_field_page',
        'access arguments' => array('administrator access'),
  );
  $items['admin/content/slickgrid/fields_profiles'] = array(
    'title' => 'Field profiles',
    'page callback' => 'slickgrid_field_page',
    'access arguments' => array('administrator access'),
    
  );
  return $items;
}

/**
 * A simple page to explain to the developer what to do.
 */
function slickgrid_field_page() {
  return t("The Field Example provides a field composed of an HTML RGB value, like #ff00ff. To use it, add the field to a content type.");
}
/**
 * @} End of "defgroup slickgrid_field".
 */
